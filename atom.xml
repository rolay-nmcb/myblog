<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纳斯卡可`Blog</title>
  <icon>https://www.gravatar.com/avatar/feb67af737a34cba9363ed2d415c9ae9</icon>
  <subtitle>生活明朗 万物可爱</subtitle>
  <link href="https://nmcb666.vip/atom.xml" rel="self"/>
  
  <link href="https://nmcb666.vip/"/>
  <updated>2025-09-14T14:30:27.234Z</updated>
  <id>https://nmcb666.vip/</id>
  
  <author>
    <name>纳斯卡可</name>
    <email>2843035026@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://nmcb666.vip/posts/3eeb.html"/>
    <id>https://nmcb666.vip/posts/3eeb.html</id>
    <published>2025-09-14T14:30:27.234Z</published>
    <updated>2025-09-14T14:30:27.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于Spring Security的一些事</title>
    <link href="https://nmcb666.vip/posts/3f6c5c0b.html"/>
    <id>https://nmcb666.vip/posts/3f6c5c0b.html</id>
    <published>2025-09-14T13:54:10.000Z</published>
    <updated>2025-09-14T14:30:27.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-使用教程：从入门到实战"><a href="#Spring-Security-使用教程：从入门到实战" class="headerlink" title="Spring Security 使用教程：从入门到实战"></a>Spring Security 使用教程：从入门到实战</h1><p>在Web应用开发中，安全永远是不可忽视的环节。Spring Security作为Spring生态中成熟的安全框架，提供了全面的认证（Authentication）和授权（Authorization）解决方案。本文将从基础到进阶，带你一步步掌握Spring Security的核心用法，构建安全可靠的Java Web应用。(对的，这是Spring Security的入门篇)</p><h2 id="一、Spring-Security-核心概念"><a href="#一、Spring-Security-核心概念" class="headerlink" title="一、Spring Security 核心概念"></a>一、Spring Security 核心概念</h2><p>在开始实战前，先理解几个核心概念，有助于后续学习：</p><ul><li><p><strong>认证（Authentication）</strong>：验证用户身份的过程，比如登录时校验用户名和密码是否正确。</p></li><li><p><strong>授权（Authorization）</strong>：在认证通过后，判断用户是否有权限执行某个操作（如访问特定接口、修改数据）。</p></li><li><p><strong>SecurityContext</strong>：存储当前认证用户的信息，通过<code>SecurityContextHolder</code>可以随时获取。</p></li><li><p><strong>UserDetails</strong>：封装用户信息的接口，包含用户名、密码、权限等核心字段。</p></li><li><p><strong>AuthenticationManager</strong>：认证的核心管理器，负责调度<code>AuthenticationProvider</code>完成认证。</p></li></ul><h2 id="二、环境搭建：快速集成Spring-Security"><a href="#二、环境搭建：快速集成Spring-Security" class="headerlink" title="二、环境搭建：快速集成Spring Security"></a>二、环境搭建：快速集成Spring Security</h2><p>本文基于<strong>Spring Boot 3.x</strong>进行演示，Spring Boot已为Spring Security提供了自动配置，集成过程非常简单。</p><h3 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h3><p>在<code>pom.xml</code>（Maven）或<code>build.gradle</code>（Gradle）中添加Spring Security依赖：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2-2-启动应用，体验默认安全配置"><a href="#2-2-启动应用，体验默认安全配置" class="headerlink" title="2.2 启动应用，体验默认安全配置"></a>2.2 启动应用，体验默认安全配置</h3><p>添加依赖后，直接启动Spring Boot应用，Spring Security会自动生效，默认做了以下安全配置：</p><ol><li><p>所有接口默认需要认证才能访问。</p></li><li><p>生成一个默认用户，用户名是<code>user</code>，密码会在控制台输出（格式如：<code>Using generated security password: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>）。</p></li><li><p>提供一个默认的登录页面（访问任意接口会自动跳转）。</p></li></ol><p>测试：访问<code>http://localhost:8080/hello</code>（需先编写一个简单的Hello接口），会跳转至登录页，输入默认用户名和密码即可访问。</p><h2 id="三、自定义认证：从默认到数据库"><a href="#三、自定义认证：从默认到数据库" class="headerlink" title="三、自定义认证：从默认到数据库"></a>三、自定义认证：从默认到数据库</h2><p>默认配置仅用于测试，实际项目中需要对接数据库用户，下面实现自定义认证逻辑。</p><h3 id="3-1-编写配置类"><a href="#3-1-编写配置类" class="headerlink" title="3.1 编写配置类"></a>3.1 编写配置类</h3><p>创建<code>SecurityConfig</code>类，继承<code>WebSecurityConfigurerAdapter</code>（Spring Boot 3.x中已 deprecated，推荐使用函数式风格配置）：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入自定义的UserDetailsService（后续实现）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(UserDetailsService userDetailsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置密码加密器（Spring Security 5+要求必须指定密码加密方式）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置SecurityFilterChain（核心配置）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            <span class="comment">// 关闭CSRF（测试环境可关闭，生产环境需开启）</span></span><br><span class="line">            .csrf(csrf -&gt; csrf.disable())</span><br><span class="line">            <span class="comment">// 配置授权规则</span></span><br><span class="line">            .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                <span class="comment">// 放行登录接口、静态资源等</span></span><br><span class="line">                .requestMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 其他所有接口需要认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// 配置表单登录</span></span><br><span class="line">            .formLogin(form -&gt; form</span><br><span class="line">                <span class="comment">// 自定义登录页面路径（可选，默认是/spring-security-login）</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/custom-login&quot;</span>)</span><br><span class="line">                <span class="comment">// 登录请求的接口路径（默认是/login）</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/do-login&quot;</span>)</span><br><span class="line">                <span class="comment">// 登录成功后的跳转路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 登录失败后的跳转路径</span></span><br><span class="line">                .failureUrl(<span class="string">&quot;/custom-login?error=true&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// 配置退出登录</span></span><br><span class="line">            .logout(logout -&gt; logout</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/custom-login?logout=true&quot;</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="literal">true</span>) <span class="comment">// 销毁session</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="3-2-实现UserDetailsService"><a href="#3-2-实现UserDetailsService" class="headerlink" title="3.2 实现UserDetailsService"></a>3.2 实现UserDetailsService</h3><p><code>UserDetailsService</code>负责从数据库加载用户信息，我们需要实现它来对接自己的用户表：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入用户DAO（实际项目中替换为MyBatis或JPA的Repository）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomUserDetailsService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 从数据库查询用户</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">user</span> <span class="operator">=</span> userDao.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据库用户转换为UserDetails对象（包含权限信息）</span></span><br><span class="line">        <span class="keyword">return</span> User.withUsername(user.getUsername())</span><br><span class="line">                .password(user.getPassword()) <span class="comment">// 数据库中存储的密码必须是加密后的</span></span><br><span class="line">                .roles(user.getRoles().split(<span class="string">&quot;,&quot;</span>)) <span class="comment">// 假设roles字段是逗号分隔的角色字符串</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><div class="callout">注意：数据库中存储的密码必须是通过`BCryptPasswordEncoder`加密后的字符串，不能存储明文。可以通过`passwordEncoder.encode("123456")`生成加密密码。</div><h2 id="四、授权控制：基于角色和权限"><a href="#四、授权控制：基于角色和权限" class="headerlink" title="四、授权控制：基于角色和权限"></a>四、授权控制：基于角色和权限</h2><p>认证通过后，需要对不同用户授予不同权限，Spring Security支持多种授权方式。</p><h3 id="4-1-基于角色的URL授权"><a href="#4-1-基于角色的URL授权" class="headerlink" title="4.1 基于角色的URL授权"></a>4.1 基于角色的URL授权</h3><p>在<code>securityFilterChain</code>中通过<code>hasRole</code>或<code>hasAnyRole</code>配置URL的角色权限：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">    .requestMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>) <span class="comment">// 只有ADMIN角色可访问/admin下的接口</span></span><br><span class="line">    .requestMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>) <span class="comment">// ADMIN或USER角色可访问</span></span><br><span class="line">    .requestMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll() <span class="comment">// 公开接口，无需认证</span></span><br><span class="line">    .anyRequest().authenticated()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="4-2-基于注解的方法级授权"><a href="#4-2-基于注解的方法级授权" class="headerlink" title="4.2 基于注解的方法级授权"></a>4.2 基于注解的方法级授权</h3><p>在Controller方法上使用注解控制权限，需先开启全局方法安全：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="comment">// 开启PreAuthorize注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodSecurityConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>然后在Controller方法上使用注解：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有拥有ADMIN角色的用户可访问</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user-manage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">manageUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户管理页面&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有拥有DELETE权限的用户可访问</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;DELETE&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除用户：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="五、进阶功能：记住我与JWT"><a href="#五、进阶功能：记住我与JWT" class="headerlink" title="五、进阶功能：记住我与JWT"></a>五、进阶功能：记住我与JWT</h2><p>除了基础的认证授权，Spring Security还支持“记住我”、JWT令牌等高级功能。</p><h3 id="5-1-实现“记住我”功能"><a href="#5-1-实现“记住我”功能" class="headerlink" title="5.1 实现“记住我”功能"></a>5.1 实现“记住我”功能</h3><p>只需在<code>securityFilterChain</code>中添加<code>rememberMe</code>配置：</p><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.rememberMe(remember -&gt; remember</span><br><span class="line">    .rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>) <span class="comment">// 登录表单中的记住我参数名</span></span><br><span class="line">    .tokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>) <span class="comment">// 记住我有效期（7天）</span></span><br><span class="line">    .userDetailsService(userDetailsService) <span class="comment">// 加载用户信息</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>              </div>            </details><p>然后在登录表单中添加一个名为<code>remember-me</code>的复选框即可。</p><h3 id="5-2-集成JWT实现无状态认证"><a href="#5-2-集成JWT实现无状态认证" class="headerlink" title="5.2 集成JWT实现无状态认证"></a>5.2 集成JWT实现无状态认证</h3><p>对于前后端分离项目，通常使用JWT（JSON Web Token）实现无状态认证，核心步骤如下：</p><ol><li><p><strong>引入JWT依赖</strong>：添加<code>jjwt-api</code>、<code>jjwt-impl</code>、<code>jjwt-jackson</code>依赖。</p></li><li><p><strong>编写JWT工具类</strong>：实现Token的生成、解析、验证逻辑。</p></li><li><p><strong>自定义JwtAuthenticationFilter</strong>：从请求头中获取Token，解析后完成认证。</p></li><li><p><strong>配置SecurityFilterChain</strong>：关闭session，添加JWT过滤器，放行登录接口等。</p></li></ol><p>由于JWT集成步骤较多，后续会单独写一篇实战文章，感兴趣的可以关注。</p><h2 id="六、常见问题与排查"><a href="#六、常见问题与排查" class="headerlink" title="六、常见问题与排查"></a>六、常见问题与排查</h2><ul><li><p><strong>密码加密失败</strong>：确保数据库中存储的是加密后的密码，且配置了正确的<code>PasswordEncoder</code>。</p></li><li><p><strong>接口授权不生效</strong>：检查URL匹配规则的顺序（具体规则要放在通用规则前面），以及角色/权限名称是否正确（<code>hasRole</code>会自动添加<code>ROLE_</code>前缀，<code>hasAuthority</code>需要完整名称）。</p></li><li><p><strong>CSRF问题</strong>：前后端分离项目中，若关闭CSRF，需确保请求头中没有携带CSRF Token；若开启，需在前端请求中添加Token。</p></li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>本文介绍了Spring Security的核心概念、环境搭建、自定义认证、授权控制及进阶功能，涵盖了大部分实际项目中的常用场景。Spring Security功能强大且灵活，掌握它能有效提升应用的安全性。建议结合实际项目多动手实践，深入理解其核心原理（如过滤器链、认证流程等），以便应对更复杂的安全需求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security-使用教程：从入门到实战&quot;&gt;&lt;a href=&quot;#Spring-Security-使用教程：从入门到实战&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 使用教程：从入门到实战&quot;&gt;&lt;/a&gt;Sprin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机技术</title>
    <link href="https://nmcb666.vip/posts/b67a9f87.html"/>
    <id>https://nmcb666.vip/posts/b67a9f87.html</id>
    <published>2025-09-13T22:53:06.000Z</published>
    <updated>2025-09-14T14:30:27.234Z</updated>
    
    <content type="html"><![CDATA[<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg><h1 id="从“卡顿”到“丝滑”：现代计算机技术如何重塑我们的日常交互"><a href="#从“卡顿”到“丝滑”：现代计算机技术如何重塑我们的日常交互" class="headerlink" title="从“卡顿”到“丝滑”：现代计算机技术如何重塑我们的日常交互"></a>从“卡顿”到“丝滑”：现代计算机技术如何重塑我们的日常交互</h1><p>在十年前，打开一个大型文档需要等待几十秒、视频通话时频繁出现“马赛克”、手机多开几个APP就会闪退，这些场景对大多数人来说都司空见惯。而如今，我们早已习惯了“即点即开”的文档编辑、4K画质的实时视频会议、手机后台同时运行十几个应用仍流畅切换——这些“丝滑”体验的背后，并非只是“硬件变好了”这么简单，而是计算机技术在<strong>存储架构、网络传输、系统优化</strong>等多个维度协同进化的结果。今天，我们就从日常场景切入，聊聊那些“看不见却离不开”的技术进步。</p><h2 id="一、存储技术：从“机械等待”到“电子秒达”"><a href="#一、存储技术：从“机械等待”到“电子秒达”" class="headerlink" title="一、存储技术：从“机械等待”到“电子秒达”"></a>一、存储技术：从“机械等待”到“电子秒达”</h2><p>打开电脑时，系统启动速度的快慢，很大程度上取决于存储设备的性能。十年前主流的机械硬盘（HDD），就像一个“带转盘的档案柜”：读写数据时，需要先让磁盘高速旋转（通常是5400转/分钟或7200转/分钟），再让磁头移动到指定位置“查找”数据——这个过程虽然比早期的软盘快，但仍有明显的“等待时间”（平均寻道时间约8-12毫秒）。</p><p>而现在主流的固态硬盘（SSD），彻底抛弃了“机械结构”，改用<strong>NAND闪存芯片</strong>存储数据，就像把“档案柜”换成了“电子货架”：数据通过电信号直接读写，无需等待磁盘旋转或磁头移动，平均响应时间可以做到0.1毫秒以内——这意味着，从“点击开机”到“进入桌面”，时间从原来的1-2分钟压缩到了10-20秒，甚至更短。</p><p>更关键的是，SSD的进步还在持续：</p><ul><li><strong>NVMe协议</strong>的普及：相比早期SSD使用的SATA接口，NVMe直接通过PCIe总线与CPU通信，带宽提升了10倍以上，读写速度从“几百MB/s”跃升到“几GB/s”，打开4K视频文件、大型设计软件时几乎没有延迟。</li><li><strong>QLC闪存的成本下降</strong>：早期SSD因成本高，容量普遍在128GB-256GB；而现在1TB容量的QLC SSD价格已非常亲民，既能满足日常文件存储，也能装下多个大型游戏或专业软件。</li></ul><p>对普通用户来说，存储技术的进步不是“参数的胜利”，而是“打开文件不用等、编辑视频不卡顿”的实在体验。</p><h2 id="二、网络传输：从“断断续续”到“实时互动”"><a href="#二、网络传输：从“断断续续”到“实时互动”" class="headerlink" title="二、网络传输：从“断断续续”到“实时互动”"></a>二、网络传输：从“断断续续”到“实时互动”</h2><p>疫情期间，远程办公和在线学习成为常态，很多人都经历过“视频会议卡成PPT”“在线课堂声音延迟”的尴尬。这背后的核心问题，是早期网络传输在<strong>带宽、延迟、稳定性</strong>上的不足。而现在，这些问题的缓解，离不开两项关键技术的成熟：</p><h3 id="1-5G与Wi-Fi-6：解决“带宽不够用”的问题"><a href="#1-5G与Wi-Fi-6：解决“带宽不够用”的问题" class="headerlink" title="1. 5G与Wi-Fi 6：解决“带宽不够用”的问题"></a>1. 5G与Wi-Fi 6：解决“带宽不够用”的问题</h3><ul><li>5G网络的峰值速率可达10Gbps，是4G的10-100倍，即使在户外用手机开热点参加视频会议，也能支持4K画质的实时传输；</li><li>Wi-Fi 6（802.11ax）的单设备速率提升到9.6Gbps，同时支持更多设备连接（最多可同时连接100+设备）——这意味着，家里的电视、手机、电脑、智能音箱同时联网，也不会出现“抢网速”导致的卡顿。</li></ul><h3 id="2-边缘计算：降低“数据跑太远”的延迟"><a href="#2-边缘计算：降低“数据跑太远”的延迟" class="headerlink" title="2. 边缘计算：降低“数据跑太远”的延迟"></a>2. 边缘计算：降低“数据跑太远”的延迟</h3><p>传统的网络架构中，我们的视频通话数据需要先传到远方的“中心服务器”，再转发给对方，这个过程会产生几十甚至上百毫秒的延迟（即“网络时延”）。而边缘计算则把“服务器”搬到了离用户更近的地方（比如城市的基站、区域数据中心），数据传输距离缩短，时延可以降低到10毫秒以内——这也是为什么现在的“实时连麦”“云游戏”能做到“操作无延迟”的关键。</p><p>举个例子：以前玩云游戏，按下“射击”按钮后，需要等1-2秒才能看到画面反应；现在有了边缘计算和高速网络，延迟几乎可以忽略，体验和在本地玩游戏没什么区别。</p><h2 id="三、系统优化：从“资源浪费”到“智能调度”"><a href="#三、系统优化：从“资源浪费”到“智能调度”" class="headerlink" title="三、系统优化：从“资源浪费”到“智能调度”"></a>三、系统优化：从“资源浪费”到“智能调度”</h2><p>除了硬件和网络，操作系统的优化同样重要。早期的系统（比如Windows XP、安卓4.0）对硬件资源的调度能力较弱，比如：</p><ul><li>打开多个APP后，后台应用不会“主动释放内存”，导致可用内存越来越少，手机或电脑越来越卡；</li><li>CPU资源分配“一刀切”，不管是微信聊天还是视频渲染，都用同样的性能模式，既浪费电量，又无法满足高负载需求。</li></ul><p>而现在的操作系统（如Windows 11、安卓14），通过<strong>智能资源调度</strong>技术，让硬件性能“用在刀刃上”：</p><h3 id="1-内存管理：“动态回收”与“压缩优化”"><a href="#1-内存管理：“动态回收”与“压缩优化”" class="headerlink" title="1. 内存管理：“动态回收”与“压缩优化”"></a>1. 内存管理：“动态回收”与“压缩优化”</h3><ul><li>安卓系统的“墓碑机制”（Android 12后优化）：当APP进入后台时，系统会“冻结”其占用的内存，不再让它消耗资源；如果内存不足，会自动回收优先级低的后台APP内存，保证前台应用流畅运行。</li><li>Windows的“内存压缩”：当物理内存不足时，系统会将不常用的内存数据压缩（压缩率可达50%以上），而不是直接写入硬盘（虚拟内存），避免了因硬盘速度慢导致的卡顿。</li></ul><h3 id="2-CPU调度：“按需分配”与“能效平衡”"><a href="#2-CPU调度：“按需分配”与“能效平衡”" class="headerlink" title="2. CPU调度：“按需分配”与“能效平衡”"></a>2. CPU调度：“按需分配”与“能效平衡”</h3><ul><li>手机的“异构计算”：现在的手机CPU大多是“多核心架构”（比如4个小核+4个大核），系统会根据任务轻重分配核心：聊微信时用低功耗小核，省电量；玩游戏时调用高性能大核，保证帧率稳定。</li><li>Windows的“性能模式”：用户可以根据需求切换“节能模式”“平衡模式”“高性能模式”，比如外出办公时用节能模式延长续航，做视频剪辑时开高性能模式提升效率。</li></ul><h2 id="四、技术的终极目标：让“复杂”隐于“无形”"><a href="#四、技术的终极目标：让“复杂”隐于“无形”" class="headerlink" title="四、技术的终极目标：让“复杂”隐于“无形”"></a>四、技术的终极目标：让“复杂”隐于“无形”</h2><p>回顾计算机技术的发展，我们会发现一个规律：真正优秀的技术，从来不是让用户去“理解它”，而是让用户“感受不到它的存在”——就像我们不会在意SSD的闪存芯片如何工作，也不会关心Wi-Fi 6的协议细节，我们只需要“打开文件很快”“视频通话很流畅”。</p><p>未来，随着AI与计算机技术的融合（比如AI驱动的智能内存调度、AI优化的网络传输路径），我们的交互体验还会进一步升级：可能电脑会“预判”你要打开的文件，提前加载到内存；可能网络会“自动避开”拥堵路段，保证视频会议不卡顿。</p><p>技术的进步，最终是为了“让工具回归工具的本质”——让我们不再被“卡顿”“等待”困扰，而是更专注于内容创作、沟通协作，或者单纯地享受数字生活的乐趣。这，或许就是计算机技术最动人的地方。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;object class=&quot;ghbdage&quot; style=&quot;margin-inline:5px&quot; title=&quot;&quot; standby=&quot;loading...&quot; data=&quot;https://img.shields.io/badge/Butterfly-Theme-orange?lo</summary>
      
    
    
    
    
  </entry>
  
</feed>
